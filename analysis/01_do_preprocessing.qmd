---
here()---
title: "01_do_preprocessing"
format: html
editor: visual
---

## Script for Cleaning the Raw Eyetracking Files

The .tsv file output in pygaze contains gaze data info as well event data logged during the experiment.

The following columns are generated by the tobii_research/pygaze package:

```         
TimeStamp          Event              
GazePointXLeft     GazePointYLeft     ValidityLeft       
GazePointXRight    GazePointYRight    ValidityRight    
GazePointX         GazePointY         
PupilSizeLeft      PupilValidityLeft  
PupilSizeRight     PupilValidityRight
```

### Setup

The raw eyetracking data are stored in `BabyInfo_v1/eyetrackingData/` with a subfolder for each run of the experiment.

```{r, r-setup}
library(here)
library(tidyverse)

source("01_preprocessGazeData.R")
source("Pygaze_InterpolateAOIHits.R")

eyetracking_data_path <- "/Users/jessicamankewitz/projects/baby-info/BabyInfo_v1/eyetrackingData"
trials_path <- here('BabyInfo_v1/data')
write_file_location <- "preprocessedGazeData/cogsci2024/"
```

The following code reads each .tsv, extracts the following columns:

```         
TimeStamp       Event 
GazePointXLeft  GazePointYLeft  ValidityLeft
GazePointXRight GazePointYRight ValidityRight
GazePointX      GazePointY
```

Then separates the Event column into trial/participant columns.

```{r, read-combine-data}

#Grab file names for all eyetracking data
fullGazeDataNames <- list.files(path = eyetracking_data_path, pattern = ".tsv",
                      full.names = TRUE, recursive = TRUE)

gazeDataNames_pilot <- fullGazeDataNames[grepl("pilot_2", fullGazeDataNames)]

gazeDataNames_real <- fullGazeDataNames[grepl("/v1/", fullGazeDataNames)]

#gazeDataNames = append(gazeDataNames_pilot, gazeDataNames_real)

d_full_raw <- do.call(dplyr::bind_rows, lapply(gazeDataNames_real, integrateEventData))
```

### XY Timepoint Cleaning

Once these column values are loaded, we make the following modifications:

1.  Remove gaze measurements with ValidityLeft or ValidityRight that are greater than 1

2.  Discard XY Gaze values that fall outside the set screen size

3.  Recode values \<1 as NA

4.  Flip the Y-axis of the screen so it is in the bottom left instead of top left

5.  Fills in missing data for monocular vision (A "monocular mean" averages both eyes together. If data is available in just one eye, use the available value as the mean.)

6.  Regularizes each TimeStamp to the nearest expected TimeBin based on 30hz/16.666ms bins

```{r, clean-xy}
screen_x_max = 1920
screen_y_max = 1080

d_full_xy <- d_full_raw |> 
  processGazeData(monitor_x = screen_x_max, monitor_y = screen_y_max)
```

```{r}
d_full_xy |> 
  ggplot(aes(x = GazePointXMean, y = GazePointYMean, color = as.factor(subjCode))) +
  geom_point(alpha = .25)
```

### Assign Numeric Subject IDs

We're doing a lot of group_by subject and trial, so it's worth storing subject IDs separately that can be joined later

```{r}
d_subjects <- d_full_xy |> 
  select(Experiment, participant_group, subjCode) |> 
  unique() |> 
  mutate(subject_id = seq(1:n()))

d_full_xy <- d_full_xy |> 
  left_join(d_subjects) |> 
  select(-c(Experiment, participant_group, subjCode))
```

### Split Data into Experiment Phases

I have to assign AOIs differently for each phase because they have different AOI regions. This also means I can't do the AOI based downsampling for the entire experiment.

```{r}
d_active_train_gaze <- d_full_xy |> 
  filter(trialType == "activeTraining") |> 
  janitor::remove_empty("cols")
  
d_training_gaze <- d_full_xy |> 
  filter(trialType == "training") |> 
  janitor::remove_empty("cols")

d_active_test_gaze <- d_full_xy |> 
  filter(trialType == "activeTest") |> 
  janitor::remove_empty("cols")
```

#### Split Off Trial Information

We're also summarizing across a lot of trial data, so, for each phase, create a dataframe that contains the unique combinations of all the trial information. This will be left-joinable.

Active Training:

```         
trial_type_id    leftImage rightImage  leftAudio rightAudio trialType trialID
```

##### Active Training

```{r}
d_active_train_trials <- d_active_train_gaze |> 
  select(leftImage, rightImage, leftAudio, rightAudio, trialType, trialOrder, trial_number) |> 
  unique() |> 
  mutate(trial_type_id = seq(1:n()))

d_active_train_gaze <- d_active_train_gaze |> 
  left_join(d_active_train_trials) |> 
  select(-c(trial_number:AG))
```

##### Active test

d_active_training_trials columns:

```         
trialtype_id  leftImage rightImage  leftAudio rightAudio  novelImage  leftLabel rightLabel
```

```{r}
d_active_test_trials <- d_active_test_gaze |> 
  select(leftImage, rightImage, leftAudio, rightAudio, leftSpeakerType, rightSpeakerType,
         novelImage, leftLabel, rightLabel, trialType, trialOrder, trialID, blockID) |> 
  unique() |> 
  mutate(trial_type_id = seq(1:n()))

d_active_test_gaze <- 
  d_active_test_gaze |> 
  left_join(d_active_test_trials) |> 
  select(-c(trial_number:rightLabel))
```

##### Passive Training

Training:

```         
trial_type_id  speakerPos  leftImage rightImage  speakerType speakerExp  label video
```

```{r}
d_passive_training_trials <- d_training_gaze |> 
  select(speakerPos, leftImage, rightImage, speakerType, speakerExp, targetPos, label, video, trialOrder, trialType, trialID, blockID) |> 
  unique() |> 
  # Distinguish left and right speakers/types
  mutate(leftExp = case_when(speakerPos == "left" ~ speakerExp,
                             speakerPos == "right" & speakerExp == "exp1" ~ "exp2",
                             speakerPos == "right" & speakerExp == "exp2" ~ "exp1"),
         leftSpeakerType = case_when(speakerPos == "left" ~ speakerType,
                             speakerPos == "right" & speakerType == "reliable" ~ "unreliable",
                             speakerPos == "right" & speakerType == "unreliable" ~ "reliable"),
         rightExp = case_when(speakerPos == "right" ~ speakerExp,
                             speakerPos == "left" & speakerExp == "exp1" ~ "exp2",
                             speakerPos == "left" & speakerExp == "exp2" ~ "exp1"),
         rightSpeakerType = case_when(speakerPos == "right" ~ speakerType,
                             speakerPos == "left" & speakerType == "unreliable" ~ "reliable",
                             speakerPos == "left" & speakerType == "reliable" ~ "unreliable")) |> 
  separate(label, c("carrier", "target_label"), remove=F) |> 
  # Determine target vs distractor objects
  mutate(random_side = rep(c("left", "right"), n()/2),
         targetSide = ifelse(targetPos == "none", random_side, targetPos),
         distractorSide = ifelse(targetSide=="left", "right", "left")) |> 
  select(-random_side) |> 
    mutate(trial_type_id = seq(1:n()))

d_training_gaze <- d_training_gaze |> 
  left_join(d_passive_training_trials) |> 
  select(-c(trial_number:video, carrier:distractorSide))
```

### Assign AOIs

#### AOI Areas

##### Passive Training AOIs

```{r}
obj_area_width = c(-150, 150)
obj_area_height = c(-150, 150)
left_obj_coords = c(480, 190)
right_obj_coords = c(1440, 190)

face_area_width = c(-250, 250)
face_area_height = c(-250, 250)
left_face_coords = c(480, 740)
right_face_coords = c(1440, 740)

left_obj_aoi = list(left_obj_coords[[1]] + obj_area_width, 
                    left_obj_coords[[2]] + obj_area_height)
right_obj_aoi = list(right_obj_coords[[1]] + obj_area_width, 
                    right_obj_coords[[2]] + obj_area_height)
left_face_aoi = list(left_face_coords[[1]] + face_area_width, 
                    left_face_coords[[2]] + face_area_height)
right_face_aoi = list(right_face_coords[[1]] + face_area_width, 
                    right_face_coords[[2]] + face_area_height)

```

Quick plot to check AOI reasonablility:

```{r}
d_training_gaze |> 
  ggplot(aes(x = GazePointXMean, y = GazePointYMean, color = as.factor(subject_id))) +
  geom_point(alpha = .05) +
annotate("rect", xmin = 0, xmax = screen_x_max, ymin = 0, ymax = screen_y_max, 
                   fill=NA, color="black", size=0.5) +
  annotate("rect", xmin=left_obj_aoi[[1]][[1]], xmax=left_obj_aoi[[1]][[2]], 
                ymin=left_obj_aoi[[2]][[1]], ymax=left_obj_aoi[[2]][[2]], 
            color = "black", size = .5, fill = NA) +
  annotate("rect", xmin=right_obj_aoi[[1]][[1]], xmax=right_obj_aoi[[1]][[2]], 
                ymin=right_obj_aoi[[2]][[1]], ymax=right_obj_aoi[[2]][[2]], 
            color = "black",fill=NA) +
  annotate("rect", xmin=left_face_aoi[[1]][[1]], xmax=left_face_aoi[[1]][[2]], 
                ymin=left_face_aoi[[2]][[1]], ymax=left_face_aoi[[2]][[2]],
            color = "black", fill=NA) +
  annotate("rect", xmin=right_face_aoi[[1]][[1]], xmax=right_face_aoi[[1]][[2]], 
                ymin=right_face_aoi[[2]][[1]], ymax=right_face_aoi[[2]][[2]],
            color = "black", fill=NA) +
  theme_classic() + 
  guides(color = guide_legend(override.aes = list(alpha = 1)))
```

Looks reasonable! Assign these AOIs

```{r}
d_training_aoi <- d_training_gaze |> 
  mutate(LookAOI = NA) |> 
  assignAOI(left_obj_aoi, "left_obj") |> 
  assignAOI(right_obj_aoi, "right_obj") |> 
  assignAOI(left_face_aoi, "left_face") |> 
  assignAOI(right_face_aoi, "right_face") |> 
  mutate(LookAOI = case_when(LookAOI == "to_fill" & isLook==1 ~ "other",
                         LookAOI != "to_fill" ~ LookAOI, 
                         TRUE ~ "off"))|> 
  select(-c(GazePointXLeft:TimeStamp_num))
```

```{r}
table(d_training_aoi$LookAOI)
```

##### Active AOIs (Test)

```{r}
active_width = c(-210, 210)
active_height = c(-300, 300)
left_active_coords = c(360, 540)
right_active_coords = c(1560, 540)

left_active_face_aoi = list(left_active_coords[[1]] + active_width, 
                    left_active_coords[[2]] + active_height)
right_active_face_aoi = list(right_active_coords[[1]] + active_width, 
                    right_active_coords[[2]] + active_height)

# coordinates for objects if we want to see proportion to novel objects in the future
active_novel_width = c(-100, 100)
active_novel_height = c(-100, 100)
left_active_novel_coords = c(360, 390)
right_active_novel_coords = c(1560, 390)

left_active_novel_aoi = list(left_active_novel_coords[[1]] + active_novel_width, 
                    left_active_novel_coords[[2]] + active_novel_height)
right_active_novel_aoi = list(right_active_novel_coords[[1]] + active_novel_width, 
                    right_active_novel_coords[[2]] + active_novel_height)
```

Quick plot to check AOIs

```{r}
d_active_test_gaze |> 
  ggplot(aes(x = GazePointXMean, y = GazePointYMean, color = as.factor(subject_id))) +
  geom_point(alpha = .025) + 
  annotate("rect", xmin = 0, xmax = screen_x_max, ymin = 0, ymax = screen_y_max, 
            color = "black", fill = NA) +
  annotate("rect", xmin=left_active_face_aoi[[1]][[1]], xmax=left_active_face_aoi[[1]][[2]], 
                ymin=left_active_face_aoi[[2]][[1]], ymax=left_active_face_aoi[[2]][[2]], 
            color = "black", fill=NA) +
  annotate("rect", xmin=right_active_face_aoi[[1]][[1]], xmax=right_active_face_aoi[[1]][[2]], 
                ymin=right_active_face_aoi[[2]][[1]], ymax=right_active_face_aoi[[2]][[2]], 
            color = "black",fill=NA)+
  annotate("rect", xmin=left_active_novel_aoi[[1]][[1]], xmax=left_active_novel_aoi[[1]][[2]], 
                ymin=left_active_novel_aoi[[2]][[1]], ymax=left_active_novel_aoi[[2]][[2]],
            color = "black", fill=NA) +
  annotate("rect", xmin=right_active_novel_aoi[[1]][[1]], xmax=right_active_novel_aoi[[1]][[2]], 
                ymin=right_active_novel_aoi[[2]][[1]], ymax=right_active_novel_aoi[[2]][[2]],
            color = "black", fill=NA) +
  theme_classic() + 
  guides(color = guide_legend(override.aes = list(alpha = 1)))
```

Looks good, assign these AOIs:

```{r}
d_active_test_aoi <- d_active_test_gaze |> 
  mutate(LookAOI = NA) |> 
  assignAOI(left_active_face_aoi, "left_speaker") |> 
  assignAOI(right_active_face_aoi, "right_speaker") |> 
  mutate(LookAOI = case_when(LookAOI == "to_fill" & isLook==1 ~ "other",
                         LookAOI != "to_fill" ~ LookAOI, 
                         TRUE ~ "off"))|> 
  select(-c(GazePointXLeft:TimeStamp_num))
```

```{r}
table(d_active_test_aoi$LookAOI)
```

Both active phases use the same AOIs:

```{r}
d_active_train_gaze |> 
  ggplot(aes(x = GazePointXMean, y = GazePointYMean, color = as.factor(subject_id))) +
  geom_point(alpha = .025) + 
  annotate("rect", xmin = 0, xmax = screen_x_max, ymin = 0, ymax = screen_y_max, 
            color = "black", fill = NA) +
  annotate("rect", xmin=left_active_face_aoi[[1]][[1]], xmax=left_active_face_aoi[[1]][[2]], 
                ymin=left_active_face_aoi[[2]][[1]], ymax=left_active_face_aoi[[2]][[2]], 
            color = "black", fill=NA) +
  annotate("rect", xmin=right_active_face_aoi[[1]][[1]], xmax=right_active_face_aoi[[1]][[2]], 
                ymin=right_active_face_aoi[[2]][[1]], ymax=right_active_face_aoi[[2]][[2]], 
            color = "black",fill=NA)+
  theme_classic() + 
  guides(color = guide_legend(override.aes = list(alpha = 1)))
```

##### Active Training AOIs

```{r}
d_active_train_aoi <- d_active_train_gaze |> 
  mutate(LookAOI = NA) |> 
  assignAOI(left_active_face_aoi, "left_scene") |> 
  assignAOI(right_active_face_aoi, "right_scene") |> 
  mutate(LookAOI = case_when(LookAOI == "to_fill" & isLook==1 ~ "other",
                         LookAOI != "to_fill" ~ LookAOI, 
                         TRUE ~ "off")) |> 
  select(-c(GazePointXLeft:TimeStamp_num))
```

```{r}
table(d_active_train_aoi$LookAOI)
```

## Regularize Time Bins

#### Active Training Trials

```{r}
d_active_train_aoi_binned <- d_active_train_aoi |>  
  normalizeTimeMS() |> 
  group_by(subject_id, trial_type_id) |> 
  group_modify(~rezeroTrials(.x)) |> 
  group_modify((~createTimeBins(.x)))

# Save messaging by timepoint

d_active_train_event_timepoints <- d_active_train_aoi_binned |> 
  filter(Event != "" & !is.na(Event)) |> 
  group_by(subject_id, trial_type_id, TimeBin, TimeBinMs) |> 
  summarize(Events = paste0(sort(unique(Event)), collapse = "_"))
```

#### Passive Training Trials

#### 

```{r}
d_training_aoi_binned <- d_training_aoi |>  
  normalizeTimeMS() |> 
  group_by(subject_id, trial_type_id) |> 
  group_modify(~rezeroTrials(.x)) |> 
  mutate(TimeStampRezeroed = TimeStampRezeroed - 2500) |> #word onset
  group_modify((~createTimeBins(.x)))

# Save messaging by timepoint

d_training_event_timepoints <- d_training_aoi_binned |> 
  filter(Event != "") |> 
  group_by(subject_id, trial_type_id, TimeBin, TimeBinMs) |> 
  summarize(Events = paste0(sort(unique(Event)), collapse = "_"))
```

#### 

#### Active Test Trials

```{r}
d_active_test_aoi_binned <- d_active_test_aoi |>  
  normalizeTimeMS()|> 
  group_by(subject_id, trial_type_id) |> 
  group_modify(~rezeroTrials(.x)) |> 
  group_modify((~createTimeBins(.x)))

# Save messaging by timepoint

d_active_test_event_timepoints <- d_active_test_aoi_binned |> 
  filter(Event != "") |> 
  group_by(subject_id, trial_type_id, TimeBin, TimeBinMs) |> 
  summarize(Events = paste0(sort(unique(Event)), collapse = "_"))
```

## Interpolate Gaps

#### Active Training Trials

```{r}
d_final_active_training_aoi <- 
  d_active_train_aoi_binned |> 
  InterpolateMissingAOI() |> 
  group_by(subject_id, trial_type_id, TimeBin, TimeBinMs, Event) |> 
  slice_head(n = 1) |> 
  left_join(d_subjects) |> 
  left_join(d_active_train_trials)
```

#### Training Trials

```{r}
d_final_training_aoi <- 
  d_training_aoi_binned |> 
  InterpolateMissingAOI() |> 
  group_by(subject_id, trial_type_id, TimeBin, TimeBinMs, Event) |> 
  slice_head(n = 1)|> 
  left_join(d_subjects) |> 
  left_join(d_passive_training_trials)
```

#### Test Trials

```{r}
d_final_test_aoi <- 
  d_active_test_aoi_binned |> 
  InterpolateMissingAOI() |> 
  group_by(subject_id, trial_type_id, TimeBin, TimeBinMs, Event) |> 
  slice_head(n = 1) |> 
  left_join(d_subjects) |> 
  left_join(d_active_test_trials)
```

## Final Data Label Cleaning

#### Active Training Trials

```         
"subject_id"            "trial_type_id"         "TimeBin"               "TimeBinMs"             "TimeStampRezeroed"     "TimeStamp"            "normalizedTimeStamp"   "Event"                 "GazePointYMean"        "GazePointXMean"        "isLook"                "LookAOI"              "numInterpolatedPoints" "isInterpolatedFrame"   "isTracked"             "Experiment"    
"participant_group"     "subjCode"             "leftImage"             "rightImage"            "leftAudio"             "rightAudio"            "trialType"             "trialOrder"           "trial_number"          "stimAOI"               "sideAOI"              
```

```{r}
d_final_active_training_aoi_types <- d_final_active_training_aoi |> ungroup() |> 
  select(LookAOI, leftImage, rightImage ) |> 
  distinct() |> 
  mutate(stimAOI = case_when(LookAOI == "left_scene" ~ leftImage,
                                 LookAOI == "right_scene" ~ rightImage,
                                 TRUE ~ LookAOI),
         sideAOI = LookAOI)

d_final_active_training_aoi_clean <- d_final_active_training_aoi |> 
  left_join(d_final_active_training_aoi_types)
```

### Active Test Trials

```{r}
d_final_test_aoi_types <- d_final_test_aoi |> ungroup() |> 
  select(LookAOI, leftImage, rightImage, leftSpeakerType, rightSpeakerType) |> 
  distinct() |> 
  mutate(stimAOI = case_when(LookAOI == "other" ~ "other",
                             LookAOI == "left_speaker" ~ leftImage,
                             LookAOI == "right_speaker" ~ rightImage,
                             TRUE ~ LookAOI),
         condAOI = case_when(LookAOI == "other" ~ "other",
                             LookAOI == "left_speaker" ~ leftSpeakerType,
                             LookAOI == "right_speaker" ~ rightSpeakerType,
                             TRUE ~ LookAOI),
         sideAOI = LookAOI)

d_final_test_aoi_clean <- d_final_test_aoi |> left_join(d_final_test_aoi_types)
```

### Training Trials

```{r}
d_final_training_aoi_type <- d_final_training_aoi |> ungroup() |> 
  select(LookAOI, leftSpeakerType, rightSpeakerType, targetSide, leftExp, rightExp, leftImage, rightImage, speakerType) |> 
  distinct() |> 
  mutate(condAOI = case_when(LookAOI == "left_face" ~ leftSpeakerType,
                                 LookAOI == "right_face" ~ rightSpeakerType,
                                 LookAOI == "left_obj" & targetSide == "left" ~ "target",
                                 LookAOI == "left_obj" & targetSide == "right" ~ "distractor",
                                 LookAOI == "right_obj" & targetSide == "right" ~ "target",
                                 LookAOI == "right_obj" & targetSide == "left" ~ "distractor",
                                 TRUE ~ LookAOI),
         stimAOI = case_when(LookAOI == "left_face" ~ leftExp,
                             LookAOI == "right_face" ~ rightExp,
                             LookAOI == "left_obj" ~ leftImage,
                             LookAOI == "right_obj" ~ rightImage,
                             TRUE ~ LookAOI),
         attnAOI = case_when(condAOI == "reliable" & speakerType == "reliable" ~ "target_speaker",
                             condAOI == "unreliable" & speakerType == "unreliable" ~ "target_speaker",
                             condAOI == "reliable" & speakerType == "unreliable" ~ "distractor_speaker",
                             condAOI == "unreliable" & speakerType == "reliable" ~ "distractor_speaker",
                             condAOI == "target" ~ "target_obj",
                             condAOI == "distractor" ~ "distractor_obj",
                             TRUE ~ condAOI),
         sideAOI = LookAOI)

d_final_training_aoi_clean <- d_final_training_aoi |>  left_join(d_final_training_aoi_type) 
```

# Write Data

```{r}

d_final_active_training_aoi_clean |> write_csv(file = paste0("/Users/jessicamankewitz/projects/baby-info/analysis/", write_file_location, "active_training_aois.csv"))
d_final_training_aoi_clean |> write_csv(file = paste0("/Users/jessicamankewitz/projects/baby-info/analysis/", write_file_location, "training_aois.csv"))
d_final_test_aoi_clean |> write_csv(file = paste0("/Users/jessicamankewitz/projects/baby-info/analysis/", write_file_location, "active_test_aois.csv"))

```
